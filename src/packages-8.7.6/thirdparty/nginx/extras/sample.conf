# NGINX POP/IMAP proxy configuration file for use with Zimbra
# 

working_directory /opt/zimbra;
  # change UID/GID to zimbra/zimbra upon startup
  # 
  user zimbra zimbra;
  
  # number of worker processes to start 
  # multiply this by worker_connections to get the maximum number of connections 
  # that can be simultaneously handled by nginx (the product should not exceed
  # 65536, since that is the 16-bit limit of the TCP port range)
  # 
  worker_processes  1;
  
  pid        log/nginx.pid;
  error_log  log/nginx.log debug;
  
  
  events {
      # number of simultaneous connections that each worker process can 
      # handle simultaneously
      # note that this number should not exceed the hard limit of the 
      # RLIMIT_NOFILE resource limit that is set for the zimbra user, because
      # RLIMIT_NOFILE defines the maximum number of open file descriptors that
      # a process running as a user can have - by default, limits.conf on a 
      # zimbra system will ensure that the zimbra user has more than 10k file
      # descriptors allowed for a zimbra process
  
      # (note) also see worker_rlimit_nofile at 
      # http://wiki.codemongers.com/NginxMainModule#worker_rlimit_nofile
      # 
      worker_connections  10240;
  }
  
  # environment variables for worker processes
  # 
  
  # Kerberos 5 keytab location
  env KRB5_KTNAME=/opt/zimbra/conf/krb5.keytab;
  
  memcache
  {
      # memcached server configuration
      # configure one or more memcached servers that will cache the route 
      # information for pop/imap users
      # 
        servers   localhost:11211;
  
  
      # The time that NGINX will wait for a cached result from a memcached
      # server, after which the request will be considered timed out,
      # and NGINX will fall back to an http routing lookup handler
      # 
      timeout     3000ms;
  
      # The amount of time that NGINX will wait before attempting to reconnect
      # to a memcache server that unexpectedly terminated (or shut down) its 
      # connection with NGINX
      # 
      reconnect   60000ms;
  
      # The time to live (TTL) for an entry added to the memcached server 
      # This value represents the amount of time that the route information 
      # that is cached into the memcached servers will be available, before 
      # the memcached daemon expires it
      # Memcached expects the TTL for an entry to be specified in seconds, 
      # therefore any value specified in milliseconds here will be rounded 
      # up to the next integer value in seconds. If not specified, the TTL
      # defaults to 0, which indicates an infinite time to live for the 
      # routing information
      # 
      ttl         3600000ms;
  
      # Whether or not to cache unqualified login names - this is useful in 
      # deployments where there is only one domain, but many users, so that a 
      # user may log in without the @domain suffix to the login name. If this
      # flag is enabled, then no domain is suffixed to the key of the route
      # information entry in the cache - If this flag is disabled, then the 
      # IP address of the network interface of the proxy server is suffixed
      # to the user's unqualified login name, and that is used as the key 
      # for the route information - this will make sure that in future, the
      # same user logging in to the same proxy using an unqualified login 
      # name will benefit from the previously cached route information, if any
      # By default, this value is off
      # 
      allow_unqualified    off;
  }
  
  mail
  {
      # POP/IMAP timeout
      timeout                     3600000ms;
      proxy_timeout               3600000ms;
  
      # pass error messages from the backend server to the client
      # if true, the error messages are passed to the client verbatim, else
      # nginx logs the original error message in its log file and sends back
      # a generic error message to the client
      # 
      proxy_pass_error_message    on;
  
      # HTTP lookup handlers that will return the route information for a
      # pop3/imap login
      # 
  
          auth_http   localhost:7072/service/extension/nginx-lookup;
  
  
      # Route lookup timeout
      auth_http_timeout           15000ms;
  
      # IMAP/POP3 greeting messages
      # 
  
      imap_greeting            "";
      pop3_greeting            "";
  
  	pop3_capabilities         "EXPIRE 31 USER" "TOP" "UIDL" "XOIP" "USER";
  	imap_capabilities         "ACL" "BINARY" "CATENATE" "CHILDREN" "CONDSTORE" "ENABLE" "ESEARCH" "ID" "IDLE" "IMAP4rev1" "LIST-EXTENDED" "LITERAL+" "MULTIAPPEND" "NAMESPACE" "QRESYNC" "QUOTA" "RIGHTS=ektx" "SASL-IR" "SEARCHRES" "UIDPLUS" "UNSELECT" "WITHIN";
  
      # IMAP4 ID Extension support (RFC 2971)
      # Use the imap_id directive to specify the string that should be sent
      # back by the proxy server back to the client upon receipt of an 
      # IMAP ID command as described by RFC 2971
      # There MUST be an even number of strings specified against 
      # this directive, because RFC 2971 defines the server response to be 
      # a list of field-value pairs (refer Formal Syntax, RFC 2971 Section 4)
      # Each string in this list should be enclosed within double quotes
      # If not quoted, they will be automatically quoted by nginx, but the 
      # use of quotes allows the space character to be included within an 
      # ID field or a value
      # The odd numbered strings are treated as ID fields, with the following 
      # even-numbered string considered to be the ID value corresponding to 
      # the field name
      # If omitted, the response to the ID command will be nil, which
      # according to RFC 2971, is permissible in lieu of the field-value list
      # The imap_id directive may be overridden in a server block
      # 
      imap_id         "NAME" "Zimbra" "VERSION" "5.0" "RELEASE" "zimbra";
  
      # master authenticating user for cases where nginx must authenticate 
      # on behalf of the end user -- this is required in those sasl auth
      # mechanisms where the user's plain-text password is not available,
      # in these cases, after nginx has deemed that the user has authenticated
      # himself/herself correctly, then nginx will use the master auth user 
      # name and master auth password, along with the end user's user name, 
      # in order to log in to the backend server
      # such authentication will be done as per the PLAIN sasl mechanism as 
      # defined in RFC 4616
      # (presently, this will only be used for auth gssapi)
      # 
      master_auth_username    "zmnginx";
      master_auth_password    "zmnginx";
  
      # Default realm (kerberos)
      # For GSSAPI authentication, when the server's realm is the same as 
      # the default realm as defined in the default_realm variable in the 
      # [libdefaults] section of krb5.conf, then in this case, the SASL 
      # GSSAPI library strips off the realm portion from the authenticating
      # principal. Therefore, the default realm name must be specified here
      # so that NGINX can append it to the authenticating principal for GSSAPI
      # 
      default_realm           "EXAMPLE.COM";
  
      # Resolve IP address to SASL server name (kerberos)
      # For GSSAPI, in cases of multi-homed hosts, it may be that the proxy
      # server has multiple network interfaces, and we wish to reverse map 
      # the incoming interface IP address (via DNS) to a host name, which will
      # be used as the service principal
      # Set this to on if gssapi clients will connect to a proxy server using
      # different FQDNs. Otherwise, set it to off, and the fully qualified 
      # host name of the proxy (as returned by hostname), will be used as the
      # service principal
      # If not specified, this configuration defaults to off
      # 
      sasl_host_from_ip       off;
  
      # sasl_app_name
      # This is the application name which nginx will use when initializing
      # the SASL library using the call to sasl_server_init()
      # The SASL library is initialized once per process, the application name
      # provided here is used for where to find the default configuration file
      # If not specified, sasl_app_name defaults to "nginx"
      # 
      sasl_app_name           "nginx";
  
      # Login rate limiting directives
      # 
  
      # mail_login_ip_max 
      # 
      # Sets the maximum number of times that any user is allowed to log in from
      # a particular IP over POP or IMAP to this proxy server before the login is
      # rejected with an appropriate protocol specific bye response
      # This counter is cumulative for all users that appear to the proxy to be 
      # logging in from the same IP address
      # If multiple users appear to the proxy to be logging in from the same IP 
      # address (usual with NATing), then each of the different users' login will
      # contribute to increasing the hit counter for that IP address, and when the
      # counter eventually exceeds mail_login_ip_max, then the connections from 
      # that IP address will be throttled
      # Therefore, all users from the same IP will contribute to
      # (and be affected by) this counter
      # Logins using all protocols (POP3/POP3S/IMAP/IMAPS) will affect this 
      # counter, (the counter is aggregate for all protocols, *not* separate)
      # See notes accompanying the mail_login_ip_ttl for reasonable values for
      # this directive
      # If this value is set to 0, then no throttling will take place for any IP
      # 
      mail_login_ip_max               0;
  
      # mail_login_ip_ttl
      # 
      # Sets the time-to-live for the hit counter for IP login throttling
      # Used in conjunction with mail_login_ip_max, this defines the semantics
      # of the throttling for IP logins. Therfore, if this is set to 3600s, and
      # if mail_login_ip_max is set to 1000, then it means that NGINX should not
      # allow more than 1000 users to log in to the proxy from the same IP, 
      # within the time interval of an hour (=3600s)
      # The semantics for such a configuration would then be -
      # "allow maximum 1000 users per hour from any given IP address"
      #
      mail_login_ip_ttl               3600000ms;
  
      # Define a textual message that should be displayed to the user when
      # his/her connection is rejected based on IP overusage
      # This message will be encapsulated in the proper protocol specific 
      # response to the client ("* BYE" for IMAP, and "-ERR" for POP3)
      #
      mail_login_ip_rejectmsg         "Login rejected from this IP";
  
      # Similar semantics for Rate Limiting User Logins
      # Setting mail_login_user_max to 100 and mail_login_user_ttl to 3600s
      # implies "allow maximum 100 logins per hour for any user"
      # As with the ip counterparts, the user hit counter and timeout are 
      # cumulative for all protocols
      # Also, for a given user's login, both counters are checked in succession,
      # with the IP counter being checked first
      # A login may be rejected (throttled) because the IP is over-usage, or
      # because the login name itself is over-usage
      # A value of 0 indicates that no throttling will take place for any user
      # 
      mail_login_user_max             0;
      mail_login_user_ttl             3600000ms;
      mail_login_user_rejectmsg       "Login rejected for this user";
  
      # Issue POP3 XOIP before logging in to upstream (Audit purposes)
      # 
      proxy_issue_pop3_xoip   on;
  
      # Issue IMAP ID before logging in to upstream (Audit purposes)
      #
      proxy_issue_imap_id     on;
  
      # Supported SASL Authentication mechanisms
      # 
      # Use the pop3_auth and imap_auth to specify which SASL mechanisms are 
      # enabled for POP and IMAP respectively
      # These directives may be specified at mail{} level, or overridden at
      # server{} level
      # Even though an authentication mechanism may be listed against 
      # pop3_auth and/or imap_auth, it may or may not be available depending
      # on whether cleartext login is available (see description for starttls)
      # For example, if starttls is set to only, then SASL PLAIN is not 
      # available outside of TLS/SSL
      # SASL mechanisms may be specified all on one line (space separated)
      # against pop3_auth, or they may be specified on a separate line
      # Specifying the SASL mechanisms on a separate line has the advantage
      # that they can be enabled/disabled separately by zmmtaconfig using
      # different LDAP attributes
      # Currently, only PLAIN and GSSAPI mechanisms are supported
      # 
  
       imap_auth         plain;
       imap_auth         gssapi;
  
       pop3_auth         plain;
       pop3_auth         gssapi;
  
      # Specify whether to use literal strings while issuing the LOGIN command
      # to the upstream server. If set to on, then it means that NGINX will use
      # literal strings to log in to the upstream server, and so the upstream 
      # MUST support literal strings
      # If set to off, then NGINX uses quoted strings to log in to the upstream
      # server when using the LOGIN command
      # If not specified, imap_literalauth defaults to on
      # 
      imap_literalauth        on;
  
      # Auth Wait Interval
      # Specifies the time interval that NGINX will wait before rejecting an
      # authentication attempt with invalid credentials
      # If not specified, this value defaults to 10 seconds
      # 
      auth_wait               10000ms;
  
      # TLS configuration
      # 
      ssl_prefer_server_ciphers   on;
      ssl_certificate             /opt/zimbra/conf/nginx.crt;
      ssl_certificate_key         /opt/zimbra/conf/nginx.key;
      
      # Ciphers configuration
      # Permitted ciphers. Ciphers are assigned in the formats supported by OpenSSL
      #
      ssl_ciphers             !SSLv2:!MD5:HIGH;
  
    # IMAP proxy configuration
    # 
    server
    {
        listen                  143;
        protocol                imap;
        proxy                   on;
        sasl_service_name       "imap";
        starttls                on;
    }
    
    
    # IMAPS proxy configuration
    # 
    server
    {
        listen              993;
        protocol            imap;
        proxy               on;
        ssl                 on;
        sasl_service_name   "imap";
    }
    
  
    # POP3 proxy configuration
    # 
    server
    {
        listen                  110;
        protocol                pop3;
        proxy                   on;
        sasl_service_name       "pop";
        starttls                on;
    }
    
    
    # POP3S proxy configuration
    #
    server
    {
        listen              995;
        protocol            pop3;
        proxy               on;
        ssl                 on;
        sasl_service_name   "pop";
    }
    
  }
  http
  {
      # .Define the collection of upstream HTTP servers to which we will proxy
      #  Define each server:port against a server directive
      # 
      upstream zimbra
      {
  	        server   localhost:7070;
  
          zmauth;
      }
  
      # HTTP route lookup handlers
      # 
          zmroutehandlers   localhost:7072/service/extension/nginx-lookup;
  
      zmroute_timeout 15000ms;
  
    # HTTP Proxy Configuration
    # 
    server
    {
        listen 80;
        client_max_body_size 10485760;
    
        location /
        {
      # Mixed Mode Configuration For HTTP
      
                  set $has_auth_token 0;
      
                  set $sslport 443;
                  set $sslhost $host;
                  set $nargs "zminitmode=http";
                  
                  if ($sslport != 443) {  # This is the standard SSL port, leave it as is
                      set $sslhost $host:$sslport;
                  }
       
                  if ($http_cookie ~* "ZM_AUTH_TOKEN=[^;]+(?:;|$)") {
                      set $has_auth_token 1;
                  }
      
                  if ($args ~* ^(.+)$) {
                      set $nargs "$args&$nargs";
                  }
      
                  # redirect to http unless we have a ZM_AUTH_TOKEN
                  # 
                  if ($has_auth_token = 0) {
                      set $args $nargs;
                      rewrite ^/(.*)$ https://$sslhost/$1 redirect;
                  }
      
                  # Change password URL needs to be redirected to SSL 
      
                  if ($uri ~* "changepass$") {
                      rewrite ^/(.*)$ https://$sslhost/$1 redirect;
                  }
      
    
            # Begin stray redirect hack
            # 
            # In some cases, we may get a stray redirect out of the mailhost,
            # which attempts to send us to $host:$mailhostport, where:
            # 
            # $host is the host portion (excluding port) of the proxy URL
            # $mailhostport is the zimbraMailPort as applies to the mailhost
            #   server being redirected to
            # 
            # This is the case when one mailhost in the upstream cluster is
            # trying to redirect to another mailhost in the same cluster
            # In this case, we need to trap and fudge this location header
            # 
            # NOTE that this will only work in the cases where each mailhost 
            # within the cluster has the same mailhostport (Limitation)
            # 
    
            set $mailhostport 7070;   # replace this with *the* mailhost port
            set $relhost $host;
    
            if ($mailhostport != 80) {   # standard HTTP port, do not replace
                set $relhost $host:$mailhostport;
            }
    
            # End stray redirect hack
    
            # Proxy to Zimbra Upstream
            proxy_pass http://zimbra;
    
            # For audit
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    
            # For Virtual Hosting
            proxy_set_header Host            $http_host;
    
            # Fudge inter-mailbox redirects (kludge)
            proxy_redirect http://$relhost/ http://$http_host/;
        }
    }
    # HTTPS Proxy Configuration
    # 
    server
    {
        listen                  443;
        client_max_body_size    10485760;
        ssl                     on;
        ssl_certificate         /opt/zimbra/conf/nginx.crt;
        ssl_certificate_key     /opt/zimbra/conf/nginx.key;
    
        location /
        {
      # Mixed Mode Configuration For HTTPS
      
                  set $clearport 80;
                  set $clearhost $host;
                  set $rmode "";
                  set $rargs "";
                  
                  if ($clearport != 80) { # Standard HTTP port 80
                      set $clearhost $host:$clearport;
                  }
      
                  if ($http_cookie ~* "ZM_AUTH_TOKEN=[^;]+(?:;|$)") {
                      set $rmode "+AUTH";
                  }
      
                  if ($http_cookie !~* "ZM_AUTH_TOKEN=[^;]+(?:;|$)") {
                      set $rmode "-AUTH";
                  }
      
                  if ($args ~* "(^zminitmode=http)|(&zinitmode=http)") {
                      set $rmode "$rmode+HTTP";
                  }
      
                  if ($args !~* "(^zminitmode=http)|(&zinitmode=http)") {
                      set $rmode "$rmode-HTTP";
                  }
      
                  if ($args ~* "^zminitmode=http(.*)$") {
                      set $rargs $1;
                  }
      
                  if ($args ~* "^(.+)&zminitmode=http(.*)$") {
                      set $rargs $1$2;
                  }
      
                  # For change password, we don't want to redirect back to http:// otherwise
                  # we will get an infinite loop
                  # 
      
                  if ($uri ~* "changepass$") {
                      break;
                  }
      
                  # go back to http if authtoken is present and if user had come in on http
                  # 
                  if ($rmode = "+AUTH+HTTP") {
                      set $args $rargs;
                      rewrite ^/(.*)$ http://$clearhost/$1 redirect;
                  }
       
    
            # Begin stray redirect hack
            # 
            # In some cases, we may get a stray redirect out of the mailhost,
            # which attempts to send us to $host:$mailhostport, where:
            # 
            # $host is the host portion (excluding port) of the proxy URL
            # $mailhostport is the zimbraMailPort as applies to the mailhost
            #   server being redirected to
            # 
            # This is the case when one mailhost in the upstream cluster is
            # trying to redirect to another mailhost in the same cluster
            # In this case, we need to trap and fudge this location header
            # 
            # NOTE that this will only work in the cases where each mailhost 
            # within the cluster has the same mailhostport (Limitation)
            # 
    
            set $mailhostport 7070;   # replace this with *the* mailhost port
            set $relhost $host;
    
            if ($mailhostport != 80) {   # standard HTTP port, do not replace
                set $relhost $host:$mailhostport;
            }
    
            # End stray redirect hack
    
            # Proxy to Zimbra Upstream
            proxy_pass          http://zimbra;
    
            # For audit
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    
            # For Virtual Hosting
            proxy_set_header Host            $http_host;
    
            # Location header fudging
            # Because NGINX SSL speaks plain HTTP to upstream, therefore any
            # redirects to http:// coming from the upstream need to be fudged
            # to https://
            # 
            proxy_redirect http://$http_host/ https://$http_host/;
    
            # Fudge inter-mailbox redirects (kludge)
            proxy_redirect http://$relhost/ https://$http_host/;
        }
    }
  }

